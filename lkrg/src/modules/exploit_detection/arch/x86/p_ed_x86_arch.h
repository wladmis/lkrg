/*
 * pi3's Linux kernel Runtime Guard
 *
 * Component:
 *  - x86/AMD64 specific code for Exploit Detection
 *
 * Notes:
 *  - None
 *
 * Timeline:
 *  - Created: 18.IV.2019
 *
 * Author:
 *  - Adam 'pi3' Zabrocki (http://pi3.com.pl)
 *
 */

#ifdef CONFIG_X86

#ifndef P_LKRG_EXPLOIT_DETECTION_X86_ARCH_H
#define P_LKRG_EXPLOIT_DETECTION_X86_ARCH_H

/*
 * pCFI global CPU flags
 */
#define P_PCFI_X86_SMEP 0x1

#define P_IS_SMEP_ENABLED(x) (x & P_PCFI_X86_SMEP)

/*
 * x86 specific functions
 */
static inline void p_write_cr4(unsigned long p_arg) {

#if LINUX_VERSION_CODE < KERNEL_VERSION(4,0,0)
   write_cr4(p_arg);
#else
   __write_cr4(p_arg);
#endif

}

static inline unsigned long p_read_cr4(void) {

#if LINUX_VERSION_CODE < KERNEL_VERSION(4,0,0)
   return read_cr4();
#else
   return __read_cr4();
#endif

}

static inline unsigned int p_ed_pcfi_x86_validate_smep(unsigned char p_kill) {

   unsigned int p_bad = 0x0;
   register unsigned long p_cr4 = p_read_cr4();

   if (!(p_cr4 & X86_CR4_SMEP)) {
      p_print_log(P_LKRG_CRIT,
             "<Exploit Detection> SMEP was disabled! Enforcing SMEP now!\n");
//      cr4_set_bits(X86_CR4_SMEP);
      p_cr4 |= X86_CR4_SMEP;
      p_write_cr4(p_cr4);
      p_bad++;
      if (p_kill)
         p_ed_kill_task_by_task(current);
      if (p_lkrg_global_ctrl.p_smep_panic) {
         // OK, we need to crash the kernel now
         panic(P_LKRG_SIGNATURE "SMEP verification failed and smep_panic is enabled! Killing the kernel...\n");
      }
   }

   return p_bad;
}

static inline unsigned int p_ed_pcfi_x86_validate_wp(unsigned char p_kill) {

   unsigned int p_bad = 0x0;
   register unsigned long p_cr0 = read_cr0();

   if (!(p_cr0 & X86_CR0_WP)) {
      p_print_log(P_LKRG_CRIT,
             "<Exploit Detection> Write Protection bit was disabled! Enforcing WP now!\n");
      p_cr0 |= X86_CR0_WP;
      write_cr0(p_cr0);
      wbinvd();
      p_bad++;
      if (p_kill)
         p_ed_kill_task_by_task(current);
   }

   return p_bad;
}

#endif

#endif
